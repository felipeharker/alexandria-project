"""
Construct a 2D array of geometry with optional scaling and output centroids.
"""

import Rhino.Geometry as rg
from Grasshopper import DataTree
from Grasshopper.Kernel.Data import GH_Path

# --- Inputs ---
# geo : base geometry (GeometryBase or Brep)
# x_count, y_count : number of copies in X and Y directions
# x_scale, y_scale : optional scale factors in X and Y directions
# (all inputs assumed set in the GH Python component)

# Defaults
x_count = x_count if x_count is not None else 1
y_count = y_count if y_count is not None else 1
x_scale = x_scale if x_scale is not None else 1.0
y_scale = y_scale if y_scale is not None else 1.0

# --- Core logic ---
arrayed_geometries = []
centroids = []

if geo is not None:
    # Get bounding box for spacing reference
    bbox = geo.GetBoundingBox(True)
    width = bbox.Max.X - bbox.Min.X
    height = bbox.Max.Y - bbox.Min.Y

    x_spacing = width * x_scale
    y_spacing = height * y_scale

    for i in range(x_count):
        for j in range(y_count):
            x_shift = rg.Vector3d(x_spacing * i, 0, 0)
            y_shift = rg.Vector3d(0, y_spacing * j, 0)
            translation = rg.Transform.Translation(x_shift + y_shift)

            # Duplicate and transform
            copy = geo.Duplicate()
            copy.Transform(translation)
            arrayed_geometries.append(copy)

            # Compute centroid if possible
            area_mass_props = rg.AreaMassProperties.Compute(copy)
            if area_mass_props:
                centroids.append(area_mass_props.Centroid)

# --- Outputs ---
a = arrayed_geometries  # Output: transformed geometry array
b = centroids           # Output: centroids
